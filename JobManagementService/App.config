<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <configSections>
    <section name="akka" type="Akka.Configuration.Hocon.AkkaConfigurationSection, Akka" />
  <section name="statsD" type="NStatsD.StatsDConfigurationSection, NStatsD" /></configSections>
  <startup>
    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.6" />
  </startup>
  <appSettings>
    <add key="serilog:minimum-level" value="Verbose" />
    
    <add key="serilog:write-to:ColoredConsole" />
    <add key="serilog:write-to:ColoredConsole.outputTemplate" value="{Timestamp:HH:mm} [{Level}] ({ThreadId}) {JObId} {Message}{NewLine}{Exception}" />
    <!--<add key="serilog:write-to:File.path" value="C:\Logs\log.txt" />-->
    <add key="serilog:write-to:RollingFile.pathFormat" value="C:\Logs\JobScheduler-{Date}.txt" />
    <add key="serilog:write-to:RollingFile.fileSizeLimitBytes" value="500000000" />
    <!--<add key="serilog:write-to:RollingFile.outputTemplate" value="{Timestamp:HH:mm} [{Level}] ({ThreadId}) {JobId} {Message}{NewLine}{Exception}" />-->
    <!-- 500 MB -->
    <!--<add key="serilog:write-to:RollingFile.retainedFileCountLimit" value="10" />-->

    <!-- Seq -->
    <add key="serilog:using:Seq" value="Serilog.Sinks.Seq" />
    <add key="serilog:write-to:Seq.serverUrl" value="http://localhost:5341" />
    <!--<add key="serilog:write-to:Seq.apiKey" value="[optional API key here]" />-->
    <!--Output Templates-->
  </appSettings>
  <akka>
    <hocon>
      <![CDATA[
					akka {
						actor {
							provider = "Akka.Cluster.ClusterActorRefProvider, Akka.Cluster"
							deployment {
              
								/tracker1 {
									router = consistent-hashing-group
                  routees.paths = ["/user/tracker"]
									virtual-nodes-factor = 8
									cluster {
											enabled = on
											max-nr-of-instances-per-node = 2
											allow-local-routees = off
											use-role = tracker
									}
								}                
							} 
						}
						
						remote {
							log-remote-lifecycle-events = DEBUG
							
							helios.tcp {
								transport-class = "Akka.Remote.Transport.Helios.HeliosTcpTransport, Akka.Remote"
								applied-adapters = []
								transport-protocol = tcp
								#will be populated with a dynamic host-name at runtime if left uncommented
								#public-hostname = "POPULATE STATIC IP HERE"
								hostname = "127.0.0.1"
								port = 2553
							}
              
              helios.udp {
                  port = 9003 # needs to be on a different port or IP than TCP
                  hostname = localhost
              }
						}            

						cluster {
							#will inject this node as a self-seed node at run-time
							seed-nodes = ["akka.tcp://MyBackendProcessingSystem@127.0.0.1:2553"] #manually populate other seed nodes here, i.e. "akka.tcp://lighthouse@127.0.0.1:4053", "akka.tcp://lighthouse@127.0.0.1:4044"
							roles = [jobmanager]
							auto-down-unreachable-after = 10s
						}
					}
			]]>
    </hocon>
  </akka>
  <runtime>
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
      <dependentAssembly>
        <assemblyIdentity name="Serilog" publicKeyToken="24c2f752a8e58a10" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-1.5.0.0" newVersion="1.5.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Serilog.FullNetFx" publicKeyToken="24c2f752a8e58a10" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-1.5.0.0" newVersion="1.5.0.0" />
      </dependentAssembly>
    </assemblyBinding>
  </runtime>
<statsD>
    <server host="localhost" port="8125" />
  </statsD></configuration>